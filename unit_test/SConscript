# Copyright 2013, Qualcomm Innovation Center, Inc.
#
#    All rights reserved.
#    This file is licensed under the 3-clause BSD license in the NOTICE.txt
#    file for this project. A copy of the 3-clause BSD license is found at:
#
#        http://opensource.org/licenses/BSD-3-Clause. 
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the license is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the license for the specific language governing permissions and
#    limitations under the license.

import os

Import('audio_env')

if not audio_env.has_key('GTEST_DIR'):
    print('GTEST_DIR not specified skipping alljoyn_audio unit test build')

elif commonenv['OS'] == 'darwin' and commonenv['CPU'] in ['arm', 'armv7', 'armv7s']:
    # do not even try Google test if darwin and arm
    print 'GTEST_DIR ignored when building for OS=darwin CPU=arm, skipping common unit test build'

else:
    gtest_env = audio_env.Clone();
    gtest_dir = gtest_env['GTEST_DIR']
    vars = Variables();
    vars.AddVariables(('GTEST_HOME', '', gtest_dir))
    vars.Update(gtest_env)

    if gtest_dir == '/usr':
        gtest_src_base = '%s/src/gtest' % gtest_dir
    else:
        gtest_src_base = gtest_dir

    if gtest_env['OS_CONF'] == 'android':
        # Set the ABI based on the CPU
        if gtest_env['CPU'] == 'arm':
            android_eabi = 'armeabi'
        else:
            android_eabi = 'x86'
        # Set the CPP PATH based on NDK version
        if gtest_env.subst('$ANDROID_NDK_VERSION') in [ '8b', '8c', '8d' ]:
            android_cpp_path = '$ANDROID_NDK/sources/cxx-stl/gnu-libstdc++/4.6'
        elif gtest_env.subst('$ANDROID_NDK_VERSION') in [ '7',  '8']:
            android_cpp_path = '$ANDROID_NDK/sources/cxx-stl/gnu-libstdc++'
        else:
            print 'common unit test build requires NDK v7 or newer'
            android_cpp_path = None
    else:
        android_cpp_path = None

    # tr1::tuple is not avalible for android or darwin
    if gtest_env['OS_CONF'] == 'android' or gtest_env['OS_CONF'] == 'darwin':
        gtest_env.Append(CPPDEFINES = ['GTEST_HAS_TR1_TUPLE=0'])
    # clone() library function is NOT available on android-x86
    if gtest_env['OS_CONF'] == 'android' and gtest_env['CPU'] == 'x86':
        gtest_env.Append(CPPDEFINES = ['GTEST_HAS_CLONE=0'])
    #we compile with no rtti and we are not using exceptions. 
    gtest_env.Append(CPPDEFINES = ['GTEST_HAS_RTTI=0'])
    # we replace AllJoyn's include CPPPATH options.  AllJoyn includes stlport that will cause the 
    # gTest code to not compile as expected at this time
    gtest_env.Replace(CPPPATH = [ gtest_src_base ])
    if gtest_dir != '/usr':
        gtest_env.Append(CPPPATH = [ gtest_env.Dir('$GTEST_DIR/include') ])

    if gtest_env['OS_CONF'] == 'android':
        # Android include paths
        gtest_env.Append(CPPPATH=['$ANDROID_NDK/platforms/android-$ANDROID_API_LEVEL_NDK/arch-%s/usr/include' % gtest_env['CPU'],
                                  #Using GNU STL instead of STLPORT
                                  '%s/include' % android_cpp_path,
                                  '%s/include/backward' % android_cpp_path,
                                  '%s/libs/%s/include' % (android_cpp_path, android_eabi)])

    gtest_obj = gtest_env.StaticObject(target = 'gtest-all', source = [ '%s/src/gtest-all.cc' % gtest_src_base ])
    gtest_env.StaticLibrary(target = 'gtest', source = gtest_obj)

    test_src = gtest_env.Glob('*.cc')
    
    unittest_env = gtest_env.Clone()

    gtest_dir = unittest_env['GTEST_DIR']
    if gtest_dir != '/usr':
        unittest_env.Append(CPPPATH = [gtest_dir + '/include'])

    # Unit tests can use private headers
    unittest_env.Append(CPPPATH = [env.Dir('#src')])

    if unittest_env['OS_CONF'] == 'android':
        # Android include paths
        unittest_env.Append(CPPPATH=['$ANDROID_NDK/platforms/android-$ANDROID_API_LEVEL_NDK/arch-%s/usr/include' % unittest_env['CPU'],
                                     #Using GNU STL instead of STLPORT
                                     '%s/include' % android_cpp_path,
                                     '%s/include/backward' % android_cpp_path,
                                     '%s/libs/%s/include' % (android_cpp_path, android_eabi),
                                     '$ANDROID_SRC/external/bluetooth/bluez/include',
                                     '$ANDROID_SRC/external/openssl/include'])

    #we compile with no rtti and we are not using exceptions.
    unittest_env.Append(CPPDEFINES = ['GTEST_HAS_RTTI=0'])

    # tr1::tuple is not avalible for android or darwin
    if unittest_env['OS_CONF'] == 'android' or unittest_env['OS_CONF'] == 'darwin':
        unittest_env.Append(CPPDEFINES = ['GTEST_HAS_TR1_TUPLE=0'])
    if unittest_env['OS_CONF'] == 'android' and unittest_env['CPU'] == 'x86':
        unittest_env.Append(CPPDEFINES = ['GTEST_HAS_CLONE=0'])
    #gtest library file is placed on folder above the the object files.
    unittest_env.Append(LIBPATH = ['./'])

    #the linker must be able to find stlport for android
    if unittest_env['OS_CONF'] == 'android':
        unittest_env.Append(LIBPATH = ['$ANDROID_NDK/platforms/android-$ANDROID_API_LEVEL_NDK/arch-%s/usr/lib' % unittest_env['CPU']])
    unittest_env.Prepend(LIBS = ['gtest'])

    obj = unittest_env.Object(test_src);

    unittest_prog = unittest_env.Program('AudioTest', obj)
    unittest_env.Install('$AUDIO_CPP_TESTDIR/bin', unittest_prog)
